{
  "log" : {
    "version" : "1.2",
    "pages" : [ ],
    "entries" : [ {
      "startedDateTime" : "2019-09-10T05:49:51.307Z",
      "request" : {
        "method" : "GET",
        "url" : "https://testing.adeptforms.com/modules/cdg/socket-module.js?v=1568094571",
        "httpVersion" : "",
        "cookies" : [ ],
        "headers" : [ ],
        "queryString" : [ {
          "name" : "v",
          "value" : "1568094571"
        } ],
        "headersSize" : 0,
        "bodySize" : 0,
        "comment" : ""
      },
      "response" : {
        "status" : 200,
        "statusText" : "",
        "httpVersion" : "",
        "cookies" : [ ],
        "headers" : [ {
          "name" : "Keep-Alive",
          "value" : "timeout=5, max=100"
        }, {
          "name" : "Accept-Ranges",
          "value" : "bytes"
        }, {
          "name" : null,
          "value" : "HTTP/1.1 200 OK"
        }, {
          "name" : "Server",
          "value" : "Apache/2.4.18 (Ubuntu)"
        }, {
          "name" : "ETag",
          "value" : "\"281d-5919e970982ef;5882f1cff6e94\""
        }, {
          "name" : "Connection",
          "value" : "Keep-Alive"
        }, {
          "name" : "Vary",
          "value" : "Accept-Encoding"
        }, {
          "name" : "Last-Modified",
          "value" : "Tue, 03 Sep 2019 04:33:28 GMT"
        }, {
          "name" : "Content-Length",
          "value" : "10269"
        }, {
          "name" : "Date",
          "value" : "Tue, 10 Sep 2019 05:49:51 GMT"
        }, {
          "name" : "Content-Type",
          "value" : "application/javascript"
        } ],
        "content" : {
          "size" : 10269,
          "mimeType" : "application/javascript",
          "text" : "\nconst currentHost = window.location.hostname;\nconst head = currentHost.includes('localhost') ? 'http' : 'https';\nconst dummy = false;\n//let dummyUrl = '192.168.0.190:3999'; //mock server url\n\n// serverUrl = http://165.22.104.50:3999\n// const socketUrl = currentHost.includes('localhost') ? `${head}://165.22.104.50:3999` : `${head}://${currentHost}:3999`;\n// const socketUrl = dummy ? `${head}://${dummyUrl}` : `${head}://testing.adeptforms.com:3999`;\n\n//http://165.22.104.50:3999\nconst socketUrl = `https://testing.adeptforms.com:3999`;\nconst socketConfig = {\n\treconnection: true,\n\treconnectionDelay: 1000,\n\treconnectionDelayMax: 5000,\n\treconnectionAttempts: Infinity,\n\tsecure: false,\n};\n\nlet notificationPermission;\nlet userProfile = {};\nlet socketOri, socketPrivate;\nlet browserNotification, notificationList, pageHidden;\n\nconst socketModule = {\n\tconnect: function (callback) {\n\t\tif (io) {\n\t\t\tsocketOri = io(socketUrl, socketConfig);\n\t\t\tsocketPrivate = io.connect(socketUrl + '/private', socketConfig);\n\t\t}\n\t\tcallback && callback();\n\t},\n\tlisten: function () {\n\t\tthis.askForPermission();\n\t\tthis.listenToSocket();\n\t\tthis.listenToSocketPrivate();\n\t\tthis.listenToLocalStorage();\n\t\tthis.listenToVisibilityChange();\n\t},\n\taskForPermission() {\n\t\tdocument.addEventListener('DOMContentLoaded', function () {\n\t\t\tif (Notification) {\n\t\t\t\tnotificationPermission = Notification.permission; \n\n\t\t\t\tif (Notification.permission == 'default' && userModule.browserType() == 'chrome') {\n\t\t\t\t\tNotification.requestPermission();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t},\n\tlistenToLocalStorage() {\n\t\twindow.addEventListener('storage', this.getNotificationList);\n\t},\n\tgetNotificationList() {\n\t\tnotificationList = getLocalStorage('notification') || [];\n\t\tnotificationList = _.uniqBy(notificationList, 'setTime')\n\t},\n\tlistenToSocket: function () {\n\t\tconst base = this;\n\t\tconst toListen = userModule.toListen() || '';\n\t\tif (socketOri) {\n\t\t\tsocketOri.on('connect', function (sock) {\n\n\t\t\t\tbase.registerCompany();\n\n\t\t\t\tsocketOri.on('setting', async function (message) {\n\n\t\t\t\t\tmessage.target = message.target || []; \n\t\t\t\t\tmessage.sentTime = message.sentTime || moment().format('x'); \n\n\t\t\t\t\tif (!message.doInBackground) {\n\t\t\t\t\t\tmessage.target.push('notification');\n\t\t\t\t\t\t// await base.storeNotificationTemporarily(message);\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tbase.createBrowserNotification(message);\n\t\t\t\t\t\t}, 200);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (eventBus) {\n\t\t\t\t\t\teventBus.publish('socketEvent', {\n\t\t\t\t\t\t\tsocketType: 'socketOri',\n\t\t\t\t\t\t\tname: 'setting',\n\t\t\t\t\t\t\tmessage: message\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t});\n\t\t}\n\t},\n\tlistenToVisibilityChange() {\n\t\tlet visibility = socketModule.getBrowserVisibilityKey() || {},\n\t\t\tvisibilityChange = visibility.visibilityChange;\n\n\t\tdocument.addEventListener(visibilityChange, this.handleVisibilityChange, false);\n\t},\n\tgetBrowserVisibilityKey() {\n\t\tlet hidden, visibilityChange;\n\t\tif (typeof document.hidden !== \"undefined\") { // Opera 12.10 and Firefox 18 and later support\n\t\t\thidden = \"hidden\";\n\t\t\tvisibilityChange = \"visibilitychange\";\n\t\t} else if (typeof document.msHidden !== \"undefined\") {\n\t\t\thidden = \"msHidden\";\n\t\t\tvisibilityChange = \"msvisibilitychange\";\n\t\t} else if (typeof document.webkitHidden !== \"undefined\") {\n\t\t\thidden = \"webkitHidden\";\n\t\t\tvisibilityChange = \"webkitvisibilitychange\";\n\t\t}\n\t\telse {\n\t\t\thidden = 'hidden';\n\t\t\tvisibilityChange = 'visibilitychange';\n\t\t}\n\t\treturn { hidden, visibilityChange };\n\t},\n\thandleVisibilityChange() {\n\t\tlet visibility = socketModule.getBrowserVisibilityKey() || {},\n\t\t\thidden = visibility.hidden;\n\n\t\tif (document[hidden]) {\n\t\t\tpageHidden = true;\n\t\t}\n\t\telse {\n\t\t\tpageHidden = false;\n\t\t}\n\t},\n\tlistenToSocketPrivate: function () {\n\t\tconst base = this;\n\t\tif (socketPrivate) {\n\n\t\t\tsocketPrivate.on('connect', function (sockP) {\n\n\t\t\t\tbase.registerUser();\n\n\t\t\t\tsocketPrivate.on('new_private_message', async function (message) {\n\n\t\t\t\t\tmessage.target = message.target || []; \n\t\t\t\t\tmessage.sentTime = message.sentTime || moment().format('x'); \n\n\t\t\t\t\tif (!message.doInBackground) {\n\t\t\t\t\t\tmessage.target.push('notification');\n\t\t\t\t\t\t// await base.storeNotificationTemporarily(message);\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tbase.createBrowserNotification(message);\n\t\t\t\t\t\t}, 400);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (eventBus) {\n\t\t\t\t\t\teventBus.publish('socketEvent', {\n\t\t\t\t\t\t\tsocketType: 'socketPrivate',\n\t\t\t\t\t\t\tname: 'new_private_message',\n\t\t\t\t\t\t\tmessage: message\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tsocketPrivate.on('new_private_notif', async function (message) {\n\n\t\t\t\t\tmessage.target = message.target || []; \n\t\t\t\t\tmessage.sentTime = message.sentTime || moment().format('x'); \n\n\t\t\t\t\tif (!message.doInBackground) {\n\t\t\t\t\t\tmessage.target.push('notification');\n\t\t\t\t\t\t// await base.storeNotificationTemporarily(message);\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tbase.createBrowserNotification(message);\n\t\t\t\t\t\t}, 400);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (eventBus) {\n\t\t\t\t\t\teventBus.publish('socketEvent', {\n\t\t\t\t\t\t\tsocketType: 'socketPrivate',\n\t\t\t\t\t\t\tname: 'new_private_notif',\n\t\t\t\t\t\t\tmessage: message\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tsocketPrivate.on('new_admin_notif', async function (message) {\n\n\t\t\t\t\tmessage.target = message.target || []; \n\t\t\t\t\tmessage.sentTime = message.sentTime || moment().format('x'); \n\n\t\t\t\t\tif (!message.doInBackground) {\n\t\t\t\t\t\tmessage.target.push('notification');\n\t\t\t\t\t\t// await base.storeNotificationTemporarily(message);\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tbase.createBrowserNotification(message);\n\t\t\t\t\t\t}, 400);\n\t\t\t\t\t}\n\n\n\t\t\t\t\tif (eventBus) {\n\t\t\t\t\t\teventBus.publish('socketEvent', {\n\t\t\t\t\t\t\tsocketType: 'socketPrivate',\n\t\t\t\t\t\t\tname: 'new_admin_notif',\n\t\t\t\t\t\t\tmessage: message\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t})\n\t\t}\n\t},\n\temit: function (socketType=\"socketPrivate\", toEmit={}) {\n\t\tif(Array.isArray(toEmit)) {\n\t\t\ttoEmit.forEach((emit)=> {\n\t\t\t\tthis.emitObject(socketType, emit);\n\t\t\t})\n\t\t} \n\t\telse if(typeof toEmit == 'object' && isExist(toEmit)) {\n\t\t\tthis.emitObject(socketType, toEmit);\n\t\t}\n\t\telse {\n\t\t\tthrow new Error('Your socket request is not complete'); \n\t\t}\n\t},\n\temitObject(socketType, toEmit={}) {\n\n\t\t/*\n\t\t\tMessage structure.\n\t\t\t\tADMIN_NOTIF: companyId is compulsory\n\t\t\t\tOTHERS: toId is compulsory\n\t\t\t\t{\n\t\t\t\t\ttoId*: '',\n\t\t\t\t}\n\t\t*/\n\n\t\t/*\n\t\t\tAvailable channels:\n\t\t\t\tPRIVATE: chat -> room; notif -> private_notif; admin -> admin_notif; \n\t\t\t\tORI: setting -> setting (everyone gets this)\n\t\t*/\n\n\t\tlet channel = toEmit.channel,\n\t\t\tmessage = toEmit.message;\n\n\t\tif (typeof socketType == 'string') {\n\t\t\tif (socketType == 'socketOri' && socketOri) {\n\t\t\t\tif (Array.isArray(message)) {\n\t\t\t\t\tmessage.forEach((msg) => {\n\t\t\t\t\t\tsocketOri.emit(channel, msg);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tsocketOri.emit(channel, message);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (socketType == 'socketPrivate' && socketPrivate) {\n\t\t\t\tif (Array.isArray(message)) {\n\t\t\t\t\tmessage.forEach((msg) => {\n\t\t\t\t\t\tsocketPrivate.emit(channel, msg);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tsocketPrivate.emit(channel, message);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthrow new Error('Your socket request is not valid'); \n\t\t}\n\t},\n\tstoreNotificationTemporarily(message = {}) {\n\t\tif ((notificationList || []).length) {\n\t\t\tlet messageAlreadyStored = (notificationList || [])\n\t\t\t\t.filter((notif) => notif.sentTime == message.sentTime\n\t\t\t\t\t&& notif.toId == message.toId\n\t\t\t\t\t&& notif.title == message.title\n\t\t\t\t\t&& (notif.message || notif.body) == (message.message || message.body));\n\n\n\t\t\tif (!messageAlreadyStored.length) {\n\t\t\t\tsetLocalStorage('notification', (notificationList || []).concat([message]));\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tsetLocalStorage('notification', [message]);\n\t\t}\n\t},\n\tcreateBrowserNotification(message = {}) {\n\n\t\t/*\n\t\t\t{\n\n\t\t\t\ttoId: '',\n\t\t\t\ttitle: '',\n\t\t\t\tmessage / body: '',\n\t\t\t\ttargetUrl: '',\n\t\t\t\tsentTime: '',\n\t\t\t\ticon: '',\n\t\t\t}\n\t\t*/\n\n\t\tlet source = message || {};\n\t\tlet alertTitle = source.title || 'Notification';\n\t\tlet alertMessage = source.body || source.message || 'You have new notification';\n\n\t\tbrowserNotification = new Notification(\n\t\t\tshortenText(alertTitle, 50), {\n\t\t\t\tbody: shortenText(alertMessage, 100),\n\t\t\t\ticon: source.icon || url('images/addons/cdg/logo.png'),\n\t\t\t\ttag: source.setTime + '_' + sentenceToKebabText(shortenText(alertMessage, 30, false))\n\t\t\t}\n\t\t);\n\n\t\tif (browserNotification) {\n\t\t\tsetTimeout(() => {\n\t\t\t\tbrowserNotification.close()\n\t\t\t}, 4000);\n\n\t\t\tbrowserNotification.onclick = () => {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\twindow.location = message.targetUrl || window.location.href;\n\t\t\t\t}, 1000);\n\t\t\t}\n\t\t};\n\t},\n\tregisterUser(request = null, adminRequest = null) {\n\n\t\tuserProfile = userModule.profile(); \n\n\t\tlet socketRequest = request || {\n\t\t\tuserId: returnId(userProfile) || returnId(userModule.profile()),\n\t\t\tsocketId: returnId(socketOri) || returnId(socketOri.io.engine)\n\t\t};\n\t\tlet socketAdminRequest = adminRequest || {\n\t\t\tcompanyId: (userProfile || {}).companyID || (profile || {}).companyID\n\t\t};\n\n\n\t\tif (socketRequest.userId && socketRequest.socketId) {\n\t\t\tsocketPrivate.emit(\"register-user\", socketRequest);\n\n\t\t\tif (userModule.userType() == 'admin') {\n\t\t\t\tif (socketAdminRequest.companyId) {\n\t\t\t\t\tsocketPrivate.emit('register-admin', socketAdminRequest);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tlet newProfile = userModule.profile();\n\t\t\t\t\t\tsocketRequest = {\n\t\t\t\t\t\t\tuserId: returnId(newProfile) || returnId(profile),\n\t\t\t\t\t\t\tsocketId: returnId(socketOri) || returnId(socketOri.io.engine)\n\t\t\t\t\t\t};\n\t\t\t\t\t\tsocketAdminRequest = {\n\t\t\t\t\t\t\tcompanyId: (userProfile || {}).companyID || (profile || {}).companyID\n\t\t\t\t\t\t};\n\t\t\t\t\t\tthis.registerUser(socketRequest, socketAdminRequest);\n\t\t\t\t\t}, 2000)\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tsetTimeout(() => {\n\t\t\t\tlet newProfile = userModule.profile();\n\t\t\t\tsocketRequest = {\n\t\t\t\t\tuserId: returnId(newProfile) || returnId(profile),\n\t\t\t\t\tsocketId: returnId(socketOri) || returnId(socketOri.io.engine)\n\t\t\t\t};\n\t\t\t\tthis.registerUser(socketRequest)\n\t\t\t}, 2000)\n\t\t}\n\t},\n\tregisterCompany: async function (request = null) {\n\n\t\tlet socketRequest = request || {\n\t\t\tcompanyId: userProfile.companyID || (userModule.profile()).companyID\n\t\t};\n\n\t\tif (socketRequest.companyId && socketRequest.companyId !== undefined) {\n\t\t\tsocketOri.emit(\"register\", socketRequest);\n\n\t\t\treturn false;\n\t\t}\n\t\telse {\n\t\t\tlet newProfile = await userModule.profile();\n\t\t\tsetTimeout(() => {\n\t\t\t\tsocketRequest = {\n\t\t\t\t\tcompanyId: newProfile.companyID\n\t\t\t\t};\n\t\t\t\tthis.registerCompany(socketRequest)\n\t\t\t}, 2000)\n\t\t}\n\t},\n};\n\n\n\n",
          "comment" : ""
        },
        "redirectURL" : "",
        "headersSize" : 279,
        "bodySize" : 10269,
        "comment" : ""
      },
      "cache" : { },
      "timings" : {
        "comment" : "",
        "ssl" : -1,
        "blocked" : -1,
        "receive" : 0,
        "connect" : 160,
        "dns" : -1,
        "wait" : 0,
        "send" : 0
      },
      "comment" : "",
      "_katalonRequestInformation" : {
        "name" : "96",
        "testObjectId" : "Temporary RESTful request object",
        "harId" : "0e7e3c82-8bfb-417c-9870-1a611833dc49",
        "reportFolder" : null
      },
      "time" : 160
    } ],
    "comment" : ""
  }
}