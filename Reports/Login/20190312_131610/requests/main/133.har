{
  "log" : {
    "version" : "1.2",
    "creator" : {
      "name" : "BrowserMob Proxy",
      "version" : "2.1.5",
      "comment" : ""
    },
    "pages" : [ {
      "id" : "Page 0",
      "startedDateTime" : "2019-03-12T05:18:16.872Z",
      "title" : "Page 0",
      "pageTimings" : {
        "onLoad" : 179,
        "comment" : ""
      },
      "comment" : ""
    } ],
    "entries" : [ {
      "pageref" : "Page 0",
      "startedDateTime" : "2019-03-12T05:18:16.994Z",
      "request" : {
        "method" : "GET",
        "url" : "https://testing.adeptforms.com/modules/cdg/chat.js?v=123",
        "httpVersion" : "HTTP/1.1",
        "cookies" : [ ],
        "headers" : [ {
          "name" : "User-Agent",
          "value" : "Katalon Studio"
        }, {
          "name" : "Host",
          "value" : "testing.adeptforms.com"
        }, {
          "name" : "Accept",
          "value" : "text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2"
        }, {
          "name" : "Connection",
          "value" : "keep-alive"
        } ],
        "queryString" : [ {
          "name" : "v",
          "value" : "123"
        } ],
        "headersSize" : 189,
        "bodySize" : 0,
        "comment" : ""
      },
      "response" : {
        "status" : 200,
        "statusText" : "OK",
        "httpVersion" : "HTTP/1.1",
        "cookies" : [ ],
        "headers" : [ {
          "name" : "Date",
          "value" : "Tue, 12 Mar 2019 05:18:16 GMT"
        }, {
          "name" : "Server",
          "value" : "Apache/2.4.18 (Ubuntu)"
        }, {
          "name" : "Last-Modified",
          "value" : "Fri, 01 Mar 2019 09:39:17 GMT"
        }, {
          "name" : "ETag",
          "value" : "\"14b2-583052e3ececb;57bdca71bb66e\""
        }, {
          "name" : "Accept-Ranges",
          "value" : "bytes"
        }, {
          "name" : "Content-Length",
          "value" : "5298"
        }, {
          "name" : "Vary",
          "value" : "Accept-Encoding"
        }, {
          "name" : "Content-Type",
          "value" : "application/javascript"
        } ],
        "content" : {
          "size" : 5298,
          "mimeType" : "application/javascript",
          "text" : "Vue.http.options.emulateJSON = true\nvar countChatListener,\n\tcountChatData,\n\topenChatListener,\n\topenChatData\nvar v_chat = new Vue({\n    el: \"#chat-container\",\n    data: {\n\t\tisLogin: false,\n\t\tisOpen: false,\n\t\tisChat: false,\n\t\tisEnable: false,\n\t\tchats: {},\n\t\tuserID: null,\n\t\tproductID: null,\n\t\tproductName: null,\n\t\tsku: null,\n\t\tchatID: null,\n\t\tmessage: \"\",\n\t\tunreadID: [],\n\t\tallUnread: 0\n    },\n\tmounted: function() {\n\t\tif (customer) {\n\t\t\tthis.isLogin = true\n\t\t\tthis.loadChat()\n\t\t} else this.isLogin = false\n\t},\n    methods: {\n    \t// Get chat by Assigned Specialist\n    \t// Listen to chat\n    \tloadChat:function() {\n    \t\tvar base = this\n\n    \t\tvar data = {\n    \t\t\tfunction: \"listCustom\",\n    \t\t\tquery: {\n    \t\t\t\t\"$skip\": 0,\n    \t\t\t\t\"$limit\": 10\n    \t\t\t}\n    \t\t}\n    \t\tloading.start('.chat-devices')\n\n    \t\tcdg_api.loadChatList(data).then(response=>{\n               \tresponse.body.data.data.map(function(item, i) {\n               \t\tbase.chats[item.id] = item\n               \t})\n               \tloading.stop('.chat-devices')\n               \tbase.listenToChat()\n            }, error => {\n                Alert.warning(\"Something is wrong!\")\n                console.log(error)\n                loading.stop('.chat-devices')\n            })\n    \t},\n\n    \t// Firebase Database ref, \n    \t// see baseServiceWorker.volt to see Firebase initialize\n    \tdbRef: function() {\n    \t\treturn fdb.ref(`${customer.companyID}-${customer.id}`).orderByChild('sku')\n    \t},\n\n    \t// Create listener for firebase to watch data update\n    \t// Listener for unread chat\n    \tlistenToChat: function() {\n\t\t\tvar base = this\n\t\t\tcountChatData = fdb.ref(`${customer.companyID}-${customer.id}`)\n\t\t\tcountChatListener = countChatData.on('value', function(snapshot) {\n\t\t\t\tbase.countUnread()\n\t\t\t})\n\t\t},\n\n\t\t// Send message\n    \tsetMessage: function(msgID, data) {\n    \t\tvar chats = fdb.ref(`${customer.companyID}-${customer.id}/${this.chatID}/chat`)\n    \t\tif (!msgID) {\n    \t\t\tvar data = {\n\t    \t\t\tfrom: customer.email,\n\t\t\t\t\tisRead: 0,\n\t\t\t\t\tmessage: this.message,\n\t\t\t\t\ttime: parseInt(moment().format('x')),\n\t\t\t\t\timage: customer.photo,\n\t\t\t\t\tuserType: \"customer\"\n\t    \t\t}\n\t    \t\tif (this.message !== '') chats.push().set(data)\n    \t\t} else {\n    \t\t\tchats.child(msgID).set(data)\n    \t\t}\n    \t\tthis.message = ''\n    \t},\n\n    \t// Read Chat by set isRead field from chat data\n    \tupdateRead: function() {\n    \t\tvar chats = fdb.ref(`${customer.companyID}-${customer.id}/${this.chatID}/chat`),\n    \t\t\tdata = {}\n    \t\tfor (var i = 0; i < this.unreadID.length; i++) {\n    \t\t\tlet x = this.unreadID[i]+'/isRead'\n    \t\t\tdata[x] = 1\n    \t\t}\n    \t\tif (!_.isEmpty(data)) chats.update(data)\n    \t\tVue.nextTick(() => {\n    \t\t\t$('#cdg .submit-chat input').focus()\n    \t\t})\n    \t},\n\n    \t// Count Chat\n\t\tcountUnread: function() {\n\t\t\tvar base = this\n\t\t\tbase.allUnread = 0\n\t\t\tObject.keys(base.chats).map(function (key, index) {\n\t\t\t\tlet count = 0,\n\t\t\t\t\tcountChat = base.dbRef().equalTo(base.chats[key].sku)\n\t\t\t\tcountChat.once('value', function(snapshot) {\n\t\t\t\t  \tcount = 0\n\t\t\t\t  \tsnapshot.forEach(function(item) {\n\t\t\t\t\t\tvar item = item.val()\n\t\t\t\t\t\tObject.keys(item.chat).map(function (key, val) {\n\t\t\t\t\t\t\tif (item.chat[key].userType === \"system\" && !item.chat[key].isRead) {\n\t\t\t\t\t\t\t\tcount += 1\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t})\n\t\t\t\t\tbase.chats[key].unread = count\n\t\t\t\t\tbase.allUnread += count\n\t\t\t\t\tbase.$forceUpdate()\n\t\t\t\t})\n\t\t\t})\n\t\t},\n\n\t\t// Open Chat Container\n\t\t// Create listener for chat\n\t\topenChat: function(data) {\n\t\t\tvar base = this\n\t\t\tvar arrChat = []\n\n\t\t\tbase.productID = data.id\n\t\t\tbase.productName = data.productName\n\t\t\tbase.sku = data.sku\n\t\t\tbase.isChat = true\n\t\t\tbase.isEnable = data.isEnable\n\t\t\tbase.unreadID = []\n\t\t\tloading.start('.chat-content')\n\t\t\topenChatData = base.dbRef().equalTo(data.sku)\n\t\t\topenChatListener = openChatData.on('value', function(snapshot) {\n\t\t\t  \tif (snapshot.val() != null) {\n\t\t\t  \t\tbase.chatID = Object.keys(snapshot.val())[0]\n\t\t\t  \t} else {\n\t\t\t  \t\tbase.chatID = null\n\t\t\t  \t}\n\t\t\t  \tsnapshot.forEach(function(item) {\n\t\t\t\t\tvar item = item.val()\n\t\t\t\t\tarrChat = []\n\t\t\t\t\tObject.keys(item.chat).map(function (key, val) {\n\t\t\t\t\t\titem.chat[key].timeFormated = moment(item.chat[key].time).format(\"ddd, h:mm a\")\n\t\t\t\t\t\tarrChat.push(item.chat[key])\n\t\t\t\t\t\tif (item.chat[key].userType === \"system\" && !item.chat[key].isRead) {\n\t\t\t\t\t\t\tbase.unreadID.push(key)\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t\tloading.stop('.chat-content')\n\t\t\t\tbase.chats[data.id].messages = _.groupBy(arrChat, function (date) {\n\t\t\t\t  return moment(date.time).startOf('day').format('dddd, MMM YY')\n\t\t\t\t})\n\t\t\t\tbase.$forceUpdate()\n\t\t\t\tVue.nextTick(function() {\n\t\t\t\t\tif (base.isOpen && base.isChat) $(\".chat-content .panel-body\").animate({ scrollTop: $('.chat-content .panel-body')[0].scrollHeight}, 0)\n\t\t\t\t})\n\t\t\t})\n\t\t},\n\t\t\n\t\t// Util\n\t\t// Open and Close Chat,\n\t\t// Read chat\n        toggleChat: function() {\n\t\t\tthis.isOpen = !this.isOpen\n\t\t\tthis.updateRead()\n\t\t\tVue.nextTick(()=> {\n\t\t\t\tif (this.isOpen && this.isChat) $(\".chat-content .panel-body\").animate({ scrollTop: $('.chat-content .panel-body')[0].scrollHeight}, 0)\n\t\t\t})\n\t\t},\n\t\tcloseChat: function() {\n\t\t\tthis.isChat = false\n\t\t}\n    },\n    watch: {\n    \t// Watch if chat closed then remove Chat Listener\n    \tisChat: function(val) {\n    \t\tif (!val) openChatData.off(\"value\", openChatListener)\n    \t\tthis.updateRead()\n    \t}\n    }\n})",
          "comment" : ""
        },
        "redirectURL" : "",
        "headersSize" : 283,
        "bodySize" : 5298,
        "comment" : ""
      },
      "cache" : { },
      "timings" : {
        "comment" : "",
        "send" : 0,
        "wait" : 53,
        "connect" : 118,
        "receive" : 0,
        "dns" : 0,
        "blocked" : 0,
        "ssl" : 72
      },
      "serverIPAddress" : "54.254.205.236",
      "comment" : "",
      "_katalonRequestInformation" : {
        "name" : "133",
        "testObjectId" : "Temporary RESTful request object",
        "harId" : "bc61c4c1-c8f8-4d17-ba3c-a48b179c7d66"
      },
      "time" : 173
    } ],
    "comment" : ""
  }
}