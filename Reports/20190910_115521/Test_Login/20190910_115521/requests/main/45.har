{
  "log" : {
    "version" : "1.2",
    "pages" : [ ],
    "entries" : [ {
      "startedDateTime" : "2019-09-10T04:56:14.669Z",
      "request" : {
        "method" : "GET",
        "url" : "https://testing.adeptforms.com/modules/cdg/user-module.js?v=1568091357",
        "httpVersion" : "",
        "cookies" : [ ],
        "headers" : [ ],
        "queryString" : [ {
          "name" : "v",
          "value" : "1568091357"
        } ],
        "headersSize" : 0,
        "bodySize" : 0,
        "comment" : ""
      },
      "response" : {
        "status" : 200,
        "statusText" : "",
        "httpVersion" : "",
        "cookies" : [ ],
        "headers" : [ {
          "name" : "Keep-Alive",
          "value" : "timeout=5, max=100"
        }, {
          "name" : "Accept-Ranges",
          "value" : "bytes"
        }, {
          "name" : null,
          "value" : "HTTP/1.1 200 OK"
        }, {
          "name" : "Server",
          "value" : "Apache/2.4.18 (Ubuntu)"
        }, {
          "name" : "ETag",
          "value" : "\"2f17-5918c97b22359;5882f1cff6e94\""
        }, {
          "name" : "Connection",
          "value" : "Keep-Alive"
        }, {
          "name" : "Vary",
          "value" : "Accept-Encoding"
        }, {
          "name" : "Last-Modified",
          "value" : "Mon, 02 Sep 2019 07:05:10 GMT"
        }, {
          "name" : "Content-Length",
          "value" : "12055"
        }, {
          "name" : "Date",
          "value" : "Tue, 10 Sep 2019 04:56:14 GMT"
        }, {
          "name" : "Content-Type",
          "value" : "application/javascript"
        } ],
        "content" : {
          "size" : 12055,
          "mimeType" : "application/javascript",
          "text" : "let profile;\nlet incognito = false;\nlet loadingProfile = false; \n\nconst userModule = {\n  profile: async function (callback) {\n    (await this.checkIncognito((isIncognito)=> {\n          this.getProfile();\n        }));\n    return profile || {};\n  },\n  browserType: function() {\n      // Return cached result if avalible, else get result then cache it.\n      // if (browser.prototype._cachedResult)\n      //     return browser.prototype._cachedResult;\n\n      // Opera 8.0+\n      var isOpera = (!!window.opr && !!opr.addons) || !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0;\n      // Firefox 1.0+\n      var isFirefox = typeof InstallTrigger !== 'undefined';\n      // Safari 3.0+ \"[object HTMLElementConstructor]\" \n      var isSafari = /constructor/i.test(window.HTMLElement) || (function (p) { return p.toString() === \"[object SafariRemoteNotification]\"; })(!window['safari'] || safari.pushNotification);\n      // Internet Explorer 6-11\n      var isIE = /*@cc_on!@*/false || !!document.documentMode;\n      // Edge 20+\n      var isEdge = !isIE && !!window.StyleMedia;\n      // Chrome 1+\n      var isChrome = !!window.chrome && !!window.chrome.webstore;\n      // Blink engine detection\n      var isBlink = (isChrome || isOpera) && !!window.CSS;\n      let result =  (isOpera ? 'Opera' :\n                isFirefox ? 'Firefox' :\n                isSafari ? 'Safari' :\n                isChrome ? 'Chrome' :\n                isIE ? 'IE' :\n                isEdge ? 'Edge' :\n                isBlink ? 'Blink' :\n                \"unknown\").toLowerCase()\n      return result; \n  },\n  checkIncognito: async function (callback) {\n      if ('storage' in navigator && 'estimate' in navigator.storage) {\n        const {usage, quota} = await navigator.storage.estimate();\n        if(quota < 120000000){\n            incognito = true;\n            callback && callback(true); \n          } \n          else {\n            incognito = false; \n            callback && callback(false); \n          } \n      } else {\n        console.log('Can not detect incognito');\n        incognito = false; \n        callback && callback(false); \n      }\n  },\n  toListen: function (target=\"\") {\n     const toListen = {\n          customer: 'toCustomer',\n          specialist: 'toSpecialist',\n          admin: 'toAdmin'\n      };\n\n      return toListen[target || this.userType()] || '';\n  },\n  appointmentToDo(target=\"\") {\n    const appointmentToDo = {\n      cs: 'meet one of our engineers',\n      submit: 'submit their device',\n      pickup: 'pick their device'\n    };\n\n    return appointmentToDo[target] || 'go to the store'; \n  },\n  widgetType(target=\"\") {\n\n    const widgetType = {\n      diagnosed: ['diagnose', 'repair', 'pending'],\n      repair: ['repair', 'burnIn'],\n      burnInDesk: ['burnIn'],\n      pending: ['pending'],\n      appointment: ['appointment']\n    };\n\n    return widgetType[target] || []; \n  },\n  storageKey(target=\"\") {\n     const storageKey = {\n          customer: 'customer',\n          specialist: 'specialist',\n          admin: 'admin'\n      };\n\n      return storageKey[target || this.userType()] || ''; \n  },\n\tuserType() {\n\t\tlet userType = ''; \n\t\tconst pathName = window.location.pathname; \n\t\tif(pathName.includes('cdg/customer')) {\n\t\t\tuserType = 'customer';\n\t\t}\t\n\t\telse if(pathName.includes('cdg/serviceWorker')) {\n\t\t\tuserType = 'specialist';\n\t\t}\n\t\telse if(pathName.includes('cdg/admin')) {\n\t\t\tuserType = 'admin';\n\t\t}\n\t\treturn userType;\n\t},\n  specialistHasNotDoneThisStage(target=\"\") {\n    const pastStages =  {\n      canceled: ['new', 'canceled'],\n      diagnosed: ['new', 'submitted', 'diagnosed'],\n      repair: ['new', 'submitted', 'diagnosed', 'repair'],\n      burnInDesk: ['new', 'submitted', 'diagnosed', 'repair', 'burnInDesk'],\n      completed: ['new', 'submitted', 'diagnosed', 'repair', 'burnInDesk', 'completed'],\n      delivered: ['new', 'submitted', 'diagnosed', 'repair', 'burnInDesk', 'completed', 'delivered', 'canceled']\n    };\n\n    let currentStage = this.specialistRepairStage();\n    if((pastStages[target] || []).includes(currentStage)) {\n      return true;\n    }\n    else {\n      return false; \n    }\n  },\n  specialistHasDoneThisStage(target=\"\") {\n    const pastStages =  {\n      delivered: ['delivered', 'canceled'],\n      completed: ['delivered', 'canceled'],\n      burnInDesk: ['completed', 'delivered', 'canceled'],\n      repair: ['burnInDesk', 'completed', 'delivered', 'canceled'],\n      diagnosed: ['repair', 'burnInDesk', 'completed', 'delivered', 'canceled'],\n      submitted: ['diagnosed', 'repair', 'burnInDesk', 'completed', 'delivered', 'canceled'],\n      new: ['submitted', 'diagnosed', 'repair', 'burnInDesk', 'completed', 'delivered', 'canceled'],\n    };\n\n    let currentStage = this.specialistRepairStage();\n\n    if((pastStages[currentStage] || []).includes(target)) {\n      return true;\n    }\n    else {\n      return false; \n    }\n  },\n  specialistIsOnRightStage(target=\"\") {\n    let currentStage = this.specialistRepairStage();\n\n    const rightStages = {\n      diagnosed: ['diagnosed', 'readyDiagnose'],\n      repair: ['repair', 'inProgress', 'onProgress', 'readyRepair'],\n      burnInDesk: ['burnIn', 'burnInDesk'],\n      completed: ['completed', 'delivered', 'canceled']\n    };\n\n    if((rightStages[target] || []).includes(currentStage)) {\n      return true;\n    }\n    else {\n      return false; \n    }\n  },\n  specialistRepairStage() {\n    let repairStage = ''; \n    const pathName = window.location.pathname; \n    if(this.userType() == 'specialist') {\n      if(pathName.includes('diagnoseDetail') || pathName.includes('readyDiagnose')) {\n        repairStage = 'diagnosed';\n      } \n      else if(pathName.includes('onProgressDetail') || pathName.includes('onProgress')) {\n        repairStage = 'repair';\n      }\n      else if(pathName.includes('burnInDeskDetail') || pathName.includes('burnInDesk')) {\n        repairStage = 'burnInDesk';\n      }\n      else if(pathName.includes('finishDetail') || pathName.includes('completed')) {\n        repairStage = 'completed';\n      }\n    }\n    return repairStage;\n  },\n  specialistRepairTitle(target=\"\") {\n    let repairStage = ''; \n    const repairKeys = {\n      diagnosed: 'Diagnose',\n      repair: 'Repair',\n      burnInDesk: 'Burn In',\n      completed: 'Repair'\n    }\n    return repairKeys[target || this.specialistRepairStage()] || 'Repair'; \n  },\n  specialistRepairKey(target=\"\") {\n    let repairStage = ''; \n    const repairKeys = {\n      diagnosed: 'diagnose',\n      repair: 'repair',\n      burnInDesk: 'burnInDesk',\n    }\n    return repairKeys[target || this.specialistRepairStage()] || 'diagnose'; \n  },\n  isMainMenu(target=\"\") {\n    target = target || this.userType();\n    let allExceptions = ['chat', 'notification', 'profile'];\n     if (target == 'customer') {\n        let currentPath = (window.location.pathname || '').split('/');\n        let exceptions = ['productDetail', 'complaint', 'ticketDetail'];\n\n        if ((_.intersection(exceptions.concat(allExceptions), currentPath) || []).length) {\n            return false;\n        }\n        else {\n            return true;\n        }\n    }\n    else if (target == 'specialist') {\n        let currentPath = (window.location.pathname || '').split('/');\n        let exceptions = ['diagnoseDetail', 'onProgressDetail', 'burnInDeskDetail', 'finishDetail'];\n\n        if ((_.intersection(exceptions.concat(allExceptions), currentPath) || []).length) {\n            return false;\n        }\n        else {\n            return true;\n        }\n    }\n    else {\n        return true; \n    }\n  },\n  homeUrl(target=\"\") {\n    const homeUrl = {\n      customer: url('module/cdg/customer/main/product'),\n      specialist: url('module/cdg/serviceWorker/readyDiagnose'),\n      admin: url('module/cdg/admin/history_service')\n    };\n    return homeUrl[target || this.userType()] || url('login'); \n  },\n  chatUrl(target=\"\") {\n    let chatUrl = {\n      customer: url('module/cdg/customer/chat'),\n      specialist: url('module/cdg/serviceWorker/chat'),\n      admin: url('module/cdg/admin/chat')\n    };\n    return chatUrl[target || this.userType()] || url('login'); \n  },\n  profileUrl(target=\"\") {\n      const homeUrl = {\n          customer: url('module/cdg/customer/main/profile'),\n          admin: url('module/cdg/admin/profile')\n      };\n\n      return homeUrl[target || this.userType()] || this.homeUrl();\n  },\n  specialistVerb(status=\"\") {\n    const verb = {\n        new: 'created',\n        submitted: 'submitted',\n        diagnosed: 'diagnosed',\n        repair: 'repaired',\n        burnInDesk: 'tested',\n        completed: 'completed',\n        canceled: 'canceled',\n        delivered: 'delivered',\n        cs: 'meet an engineer at the store',\n        submit: 'submit their device at the store',\n        pickup: 'pick their device at the store'\n    };\n\n    return verb[status] || 'checked'; \n  },\n  notificationUrl(target=\"\") {\n    let notificationUrl = {\n      customer: url('module/cdg/customer/notification'),\n      specialist: url('module/cdg/serviceWorker/notification'),\n      admin: url('module/cdg/admin/notification')\n    };\n    return notificationUrl[target || this.userType()] || url('login'); \n  },\n  ticketUrl(target=\"\", ticketId=\"\") {\n    let notificationUrl = {\n      customer: url('module/cdg/customer/main/ticketDetail'),\n      specialist: url('module/cdg/serviceWorker/finishDetail'),\n      specialistDiagnose: url('module/cdg/serviceWorker/diagnoseDetail'),\n      specialist_new: url('module/cdg/serviceWorker/diagnoseDetail'),\n      specialist_submitted: url('module/cdg/serviceWorker/diagnoseDetail'),\n      specialist_diagnosed: url('module/cdg/serviceWorker/diagnoseDetail'),\n      specialistRepair: url('module/cdg/serviceWorker/onProgressDetail'),\n      specialist_repair: url('module/cdg/serviceWorker/onProgressDetail'),\n      specialistBurnInDesk: url('module/cdg/serviceWorker/burnInDeskDetail'),\n      specialist_burnInDesk: url('module/cdg/serviceWorker/burnInDeskDetail'),\n      specialistFinish: url('module/cdg/serviceWorker/finishDetail'),\n      specialist_completed: url('module/cdg/serviceWorker/finishDetail'),\n      specialist_canceled: url('module/cdg/serviceWorker/finishDetail'),\n      specialist_delivered: url('module/cdg/serviceWorker/finishDetail'),\n      admin: url('module/cdg/admin/detail_history_devices')\n    };\n    \n    let result =  notificationUrl[target || this.userType()] || url('login'); \n\n    return (ticketId ? result+'?id='+ticketId : result); \n  },\n\tfetchProfileAPI(callback) {\n      let profile = {}; \n      let storageKey = this.storageKey();  \n      loadingProfile = true; \n      cdg_api.getProfileByUserType(this.userType(), (response)=> {\n        if(response) {\n          profile = {...{}, ..._.cloneDeep(response.body.data || {})};\n          profile.currency = profile.currency || 'SGD'; \n          profile.setTime = moment().format('x'); \n        }\n        else {\n          profile = {...{}, ...{\n            _id: null\n          }};\n        }\n        \n        loadingProfile = false; \n        setLocalStorage(storageKey, profile); \n\n      });\n\n      callback && callback();\n  },\n  setProfileDataFromLocalStorage(target=\"\") {\n      let storageKey = this.storageKey(); \n      profile = {...{}, ...getLocalStorage(storageKey)}; \n      return profile; \n  },\n  updateLocalStorage(callback) {\n    this.fetchProfileAPI(()=> {\n      this.setProfileDataFromLocalStorage(); \n      setTimeout(()=> {\n        callback && callback(); \n      }, 100);\n    });\n  },\n\tgetProfile(callback) {\n      if(!getLocalStorage(this.storageKey()) || incognito) {\n        this.updateLocalStorage(()=> {\n          callback && callback(); \n        });\n      }\n      else {\n        let currentTime = moment().format('x'); \n        let setTime = (getLocalStorage(this.storageKey()) || {}).setTime || 0; \n\n        if(moment(setTime, 'x').diff(moment(currentTime, 'x'), 'hours') >= 3) {\n          this.updateLocalStorage(()=> {\n            callback && callback();\n          })\n        }\n        else {\n          this.setProfileDataFromLocalStorage();\n          callback && callback();\n        }\n      }\n\t},\n};\n",
          "comment" : ""
        },
        "redirectURL" : "",
        "headersSize" : 279,
        "bodySize" : 12055,
        "comment" : ""
      },
      "cache" : { },
      "timings" : {
        "comment" : "",
        "ssl" : -1,
        "connect" : 230,
        "send" : 0,
        "dns" : -1,
        "blocked" : -1,
        "receive" : 0,
        "wait" : 0
      },
      "comment" : "",
      "_katalonRequestInformation" : {
        "name" : "45",
        "testObjectId" : "Temporary RESTful request object",
        "harId" : "fcaca34e-ebc0-4641-9fe0-6f2afbc10097",
        "reportFolder" : null
      },
      "time" : 230
    } ],
    "comment" : ""
  }
}