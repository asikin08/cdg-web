{
  "log" : {
    "version" : "1.2",
    "pages" : [ ],
    "entries" : [ {
      "startedDateTime" : "2019-09-10T04:45:59.219Z",
      "request" : {
        "method" : "GET",
        "url" : "https://testing.adeptforms.com/modules/cdg/customer/session/login.js?v=1568090741",
        "httpVersion" : "",
        "cookies" : [ ],
        "headers" : [ ],
        "queryString" : [ {
          "name" : "v",
          "value" : "1568090741"
        } ],
        "headersSize" : 0,
        "bodySize" : 0,
        "comment" : ""
      },
      "response" : {
        "status" : 200,
        "statusText" : "",
        "httpVersion" : "",
        "cookies" : [ ],
        "headers" : [ {
          "name" : "Keep-Alive",
          "value" : "timeout=5, max=100"
        }, {
          "name" : "Accept-Ranges",
          "value" : "bytes"
        }, {
          "name" : null,
          "value" : "HTTP/1.1 200 OK"
        }, {
          "name" : "Server",
          "value" : "Apache/2.4.18 (Ubuntu)"
        }, {
          "name" : "ETag",
          "value" : "\"1214-5918b39b50b0d;5882f1cff6e94\""
        }, {
          "name" : "Connection",
          "value" : "Keep-Alive"
        }, {
          "name" : "Vary",
          "value" : "Accept-Encoding"
        }, {
          "name" : "Last-Modified",
          "value" : "Mon, 02 Sep 2019 05:27:18 GMT"
        }, {
          "name" : "Content-Length",
          "value" : "4628"
        }, {
          "name" : "Date",
          "value" : "Tue, 10 Sep 2019 04:45:59 GMT"
        }, {
          "name" : "Content-Type",
          "value" : "application/javascript"
        } ],
        "content" : {
          "size" : 4628,
          "mimeType" : "application/javascript",
          "text" : "Vue.http.options.emulateJSON = true;\nVue.use(VeeValidate);\nvar v_login = new Vue({\n    el: \"#cdgSignIn\",\n    data: {\n        showPassword: false,\n        typing: false,\n        loginType: 'email',\n        pattern: {\n            startedWithLetters: '^[a-zA-Z]/i',\n            numberAndLetters: '([a-zA-Z](?=.*[0-9])|[0-9](?=.*[a-zA-Z]))',\n            letterOnly: '^[a-zA-Z]+$',\n            numberOnly: '^[0-9]+$',\n            email: '^([a-zA-Z0-9_\\.\\-])+\\@(([a-zA-Z0-9\\-])+\\.)+([a-zA-Z0-9]{1,8})+$',\n            phone: '^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\\s\\./0-9]*$'\n        },\n        mainData: {\n            email : \"\",\n            password: \"\",\n            userType : \"customer\",\n            remember: \"yes\"\n        }\n    },\n    created() {\n        initialization();\n    },\n\tmounted: function() {\n\t\tthis.initStyle();\n\t},\n    computed: {\n        inputPattern() {\n            if(this.loginType == 'phone') {\n                return this.pattern.numberOnly;\n            }\n            else {\n                return this.pattern.email; \n            }\n        },  \n    },\n    methods: {\n        checkSignupType() {\n            let start = this.mainData.email,\n                res = 'email';\n\n            const startedWithLetters = new RegExp (this.pattern.startedWithLetters),\n                numberOnly = new RegExp (this.pattern.numberOnly),\n                letterOnly = new RegExp(this.pattern.letterOnly),\n                email = new RegExp(this.pattern.email),\n                phone = new RegExp(this.pattern.phone),\n                numberAndLetters = new RegExp(this.pattern.numberAndLetters); \n\n            if(start) {\n                if(letterOnly.test(start) || email.test(start)) {\n                    res = 'email'; \n                }\n                else {\n                    if(numberAndLetters.test(start) && !phone.test(start)) {\n                        res = 'email'\n                    }\n                    else {\n                        res = 'phone';\n                    }\n                }\n            }\n            else {\n                res = this.loginType; \n            }\n\n            this.loginType = res; \n        },\n    \tinitStyle: function() {\n            Ladda.bind('.btn-ladda');\n        },\n        validate(scope, callback) {\n            let notify = {\n                required: false,\n                email: false,\n                password: false,\n            }; \n            this.$validator.validateAll(scope)\n            .then((response)=> {\n                if(response) {\n                    callback && callback();\n                }\n                else {\n                    validatorWarningMessage(this.errors, notify);\n                }\n            })\n            .catch((error)=> {\n                console.log(error); \n                Alert.error('Failed to validate form'); \n            })\n        },\n        clickLoginButton() {\n            if(this.$refs.loginButton) {\n                this.$refs.loginButton.click(); \n            }\n        },\n        login: function(triggerLoginButton=false) {\n            const base = this; \n            var storage = window.localStorage;\n            if(triggerLoginButton) {\n                this.clickLoginButton();\n            }\n            else {\n                this.validate('login', ()=> {\n                    var storage = window.localStorage;\n                    let request = {\n                        email: this.mainData.email,\n                        password: this.mainData.password, \n                        userType: 'customer',\n                        remember: 'yes'\n                    };\n                    cdg_customer_api.login(request)\n                        .then((response)=> {\n                            if(response.body.success || response.status == 200) {\n                                //do nothing\n                                window.location = url('module/cdg/customer/main/product'); \n                            }\n                            else {\n                                apiWarningMessage(response);\n                            }\n                            stopLaddaOnTimeout(); \n                        })\n                        .catch((error)=> {\n                            console.log(error); \n                            Alert.error('Failed to log in'); \n                        })\n                }); \n            }\n\t\t}\n    },\n    watch: {\n        'mainData.email'(val) {\n            setTimeout(()=> {\n                    this.typing = false; \n                    Vue.nextTick(()=> {\n                        this.checkSignupType(); \n                    });\n            }, 1000)\n        }\n    }\n});",
          "comment" : ""
        },
        "redirectURL" : "",
        "headersSize" : 278,
        "bodySize" : 4628,
        "comment" : ""
      },
      "cache" : { },
      "timings" : {
        "comment" : "",
        "send" : 0,
        "dns" : -1,
        "blocked" : -1,
        "connect" : 163,
        "wait" : 0,
        "receive" : 0,
        "ssl" : -1
      },
      "comment" : "",
      "_katalonRequestInformation" : {
        "name" : "49",
        "testObjectId" : "Temporary RESTful request object",
        "harId" : "bca450ef-abcd-40fc-b746-dcf4ae1d3c5d",
        "reportFolder" : null
      },
      "time" : 163
    } ],
    "comment" : ""
  }
}