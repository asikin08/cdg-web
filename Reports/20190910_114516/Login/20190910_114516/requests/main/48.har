{
  "log" : {
    "version" : "1.2",
    "pages" : [ ],
    "entries" : [ {
      "startedDateTime" : "2019-09-10T04:45:58.967Z",
      "request" : {
        "method" : "GET",
        "url" : "https://testing.adeptforms.com/modules/cdg/api/customer.js?v=1568090741",
        "httpVersion" : "",
        "cookies" : [ ],
        "headers" : [ ],
        "queryString" : [ {
          "name" : "v",
          "value" : "1568090741"
        } ],
        "headersSize" : 0,
        "bodySize" : 0,
        "comment" : ""
      },
      "response" : {
        "status" : 200,
        "statusText" : "",
        "httpVersion" : "",
        "cookies" : [ ],
        "headers" : [ {
          "name" : "Keep-Alive",
          "value" : "timeout=5, max=100"
        }, {
          "name" : "Accept-Ranges",
          "value" : "bytes"
        }, {
          "name" : null,
          "value" : "HTTP/1.1 200 OK"
        }, {
          "name" : "Server",
          "value" : "Apache/2.4.18 (Ubuntu)"
        }, {
          "name" : "ETag",
          "value" : "\"4328-5912867874a4b;5882f1cff6e94\""
        }, {
          "name" : "Connection",
          "value" : "Keep-Alive"
        }, {
          "name" : "Vary",
          "value" : "Accept-Encoding"
        }, {
          "name" : "Last-Modified",
          "value" : "Wed, 28 Aug 2019 07:33:25 GMT"
        }, {
          "name" : "Content-Length",
          "value" : "17192"
        }, {
          "name" : "Date",
          "value" : "Tue, 10 Sep 2019 04:45:59 GMT"
        }, {
          "name" : "Content-Type",
          "value" : "application/javascript"
        } ],
        "content" : {
          "size" : 17192,
          "mimeType" : "application/javascript",
          "text" : "//login\n\nconst LOGIN_CUSTOMER_URL = url('module/cdg/session/customer/login');\nconst GET_AUTH_CUSTOMER_URL = url('get_auth'); \n\n//my devices\nconst GET_DEVICE_OPTIONS_URL = url('module/cdg/main/customer/product/selection');\nconst GET_DEVICE_TABLE_URL = url('module/cdg/main/customer/product/table');\nconst UPDATE_DEVICE_URL = url('module/cdg/main/customer/product/update');\nconst DELETE_DEVICE_BY_SKU_URL = url('module/cdg/main/customer/product/update');\nconst GET_DEVICE_DETAIL_BY_SKU_URL = (deviceID) => url(`module/cdg/main/customer/product/${deviceID}`);\n\n//my appointments\nconst GET_BOOKING_TABLE_URL = url('module/cdg/main/customer/appointments/datatables');\nconst GET_STORE_LIST_URL = url('module/cdg/main/customer/store/selection');\nconst ADD_APPOINTMENT_URL = url('module/cdg/main/customer/appointments'); \nconst UPDATE_APPOINTMENT_URL = url('module/cdg/main/customer/meetSales/update'); \nconst RESCHEDULE_APPOINTMENT_URL = url('module/cdg/main/customer/appointments/reschedules');\n\n//my tickets\nconst GET_DEVICE_OPTIONS_FOR_TICKET_URL = url('module/cdg/main/customer/ticket/product/selection');\nconst GET_ISSUE_CATEGORY_OPTIONS_URL = url('module/cdg/main/customer/categories');\nconst ADD_TICKET_URL = url('module/cdg/main/customer/tickets');\nconst GET_SPECIALIST_OPTIONS_URL = url('module/cdg/main/customer/specialist');\nconst CANCEL_TICKET_BY_ID_URL = url('module/cdg/main/customer/tickets/canceled'); \nconst GET_TICKET_OPTIONS_FOR_APPOINTMENT_URL = url('module/cdg/main/customer/tickets/selections');\n\n//device detail\nconst GET_DEVICE_DETAIL_FROM_MAGENTO_BY_SKU_URL = (deviceSKU) => url(`module/cdg/customer/integration/product/${deviceSKU}`);\nconst GET_DIAGNOSE_COST_FROM_MAGENTO_URL = url('module/cdg/customer/integration/diagnose_cost'); \n\n//ticket detail\nconst GET_TICKET_DETAIL_BY_ID_URL = (ticketID) => url('module/cdg/main/customer/tickets/' + ticketID);\nconst UPDATE_TICKET_URL = url('module/cdg/main/customer/tickets/case');\n\nconst GET_TICKET_PROGRESS_BY_ID_URL = (ticketID) => url('module/cdg/main/customer/ticket/tracking/' + ticketID);\nconst PAYPAL_CHECKOUT_URL = url('module/cdg/paypal/checkout'); \nconst CONFIRM_SPAREPART_URL = url(`module/cdg/main/customer/sparepart/suggested/confirm`);\n\n//payment\nconst GET_PAYMENT_HISTORY_TABLE_URL = url('module/cdg/main/customer/payments/histories'); \n\n//tutorial\nconst SUBMIT_TICKET_BY_TICKET_ID_AND_PHONE_NUMBER_URL = (ticketID, phoneNumber) => url(`module/cdg/main/customer/ticket/submit/${ticketID}&phone=${phoneNumber}`);\nconst SUBMIT_TICKET_BY_TICKET_ID_URL = (ticketID) => url(`module/cdg/main/customer/ticket/submit/${ticketID}`);\n\n//payment success\nconst FINISH_PAYPAL_PAYMENT_URL = (paymentId, token, PayerID) => url(`module/cdg/payment/done?paymentId=${paymentId}&token=${token}&PayerID=${PayerID}`);\nconst SET_PAST_APPOINTMENTS_AS_COMPLETED_BY_TIMESTAMP_AS_CUSTOMER_URL = (timestamp) => url(`module/cdg/customer/appointment/status?currentDate=${timestamp}`)\n\n\nVue.http.options.emulateJSON = true;\nvar cdg_customer_api = new Vue({\n    methods: {\n        setPastAppointmentsAsCompletedByTimestampAsCustomer(timestamp, callback=null) {\n            this.$http.put(SET_PAST_APPOINTMENTS_AS_COMPLETED_BY_TIMESTAMP_AS_CUSTOMER_URL(timestamp))\n                .then((response)=> {\n                    if(response.body.success) {\n                        callback && callback(true);\n                    }\n                    else {\n                        callback && callback(false);\n                    }\n                })\n                .catch((error)=> {\n                    console.log(error); \n                    Alert.error('Failed to set past appointments as completed'); \n                    callback && callback(false); \n                });\n        },\n        getAuth() {\n            return this.$http.get(GET_AUTH_CUSTOMER_URL); \n        },\n        login: function(request) {\n            return this.$http.post(LOGIN_CUSTOMER_URL, request); \n        },\n        // getCustomerNotification(request, callback) {\n        //     this.$http.post(GET_CUSTOMER_NOTIFICATION_URL, request)\n        //         .then((response)=> {\n        //             callback && callback(response); \n        //         })\n        //         .catch((error)=> {\n        //             console.log(error); \n        //             Alert.error('Failed to get notifications'); \n        //         });\n        // },\n        getDeviceOptions: function () {\n            return this.$http.get(GET_DEVICE_OPTIONS_URL);\n        },\n        getDeviceTable: function (post) {\n            return this.$http.post(GET_DEVICE_TABLE_URL, post);\n        },\n        getBookingTable: function (request) {\n            return this.$http.post(GET_BOOKING_TABLE_URL, request);\n        },\n        updateDevice: function (post) {\n            return this.$http.post(UPDATE_DEVICE_URL, post);\n        },\n        deleteDeviceBySKU: function (post) {\n            return this.$http.post(DELETE_DEVICE_BY_SKU_URL, post);\n        },\n        getDeviceDetailByID: function (deviceSKU) {\n            return this.$http.get(GET_DEVICE_DETAIL_BY_SKU_URL(deviceSKU));\n        },\n        getDiagnoseCostFromMagento: function () {\n            return this.$http.get(GET_DIAGNOSE_COST_FROM_MAGENTO_URL); \n        },\n        getDeviceOptionsForTicket: function () {\n            return this.$http.get(GET_DEVICE_OPTIONS_FOR_TICKET_URL);\n        },\n        getDeviceDetailFromMagentoBySKU: function (deviceSKU) {\n            return this.$http.get(GET_DEVICE_DETAIL_FROM_MAGENTO_BY_SKU_URL(deviceSKU));\n        },\n        getIssueCategoryOptions: function () {\n            return this.$http.get(GET_ISSUE_CATEGORY_OPTIONS_URL);\n        },\n        getIssueCategoryOptionsWithResolve: function () {\n            let promise = new Promise((resolve, reject)=> {\n                this.$http.get(GET_ISSUE_CATEGORY_OPTIONS_URL)\n                .then((response)=> {\n                    if(response.body.success) {\n                        resolve(returnSelectOptions(response.body.data)); \n                    }\n                    else {\n                        apiWarningMessage(response);\n                        reject(false);\n                    }\n                })\n                .catch((error)=> {\n                    console.log(error); \n                    Alert.error('Failed to get issue category'); \n                    reject(false);\n                });\n            });\n            return promise; \n        },\n        getTicketOptions: function (callback) {\n            const vm = this;\n            Promise.all([\n                vm.$http.get(GET_DEVICE_OPTIONS_FOR_TICKET_URL),\n                vm.$http.get(GET_ISSUE_CATEGORY_OPTIONS_URL),\n                vm.$http.get(GET_STORE_LIST_URL),\n                vm.$http.get(GET_SPECIALIST_OPTIONS_URL),\n                vm.$http.get(GET_DIAGNOSE_COST_FROM_MAGENTO_URL)])\n                .then(([devices, issues, stores, specialists, cost]) => {\n                    callback && callback(devices, issues, stores, specialists, cost);\n                })\n                .catch((error) => {\n                    console.log(error);\n                    Alert.error('Failed to get options');\n                })\n        },\n        getDeviceDetailAndTicketOptions: function (deviceSKU, callback) {\n            const vm = this;\n            Promise.all([\n                vm.$http.get(GET_DEVICE_DETAIL_BY_SKU_URL(deviceSKU)),\n                vm.$http.get(GET_DEVICE_OPTIONS_FOR_TICKET_URL),\n                vm.$http.get(GET_ISSUE_CATEGORY_OPTIONS_URL),\n                vm.$http.get(GET_SPECIALIST_OPTIONS_URL)])\n                .then(([devices, issues, specialists]) => {\n                    callback && callback(deviceDetail, devices, issues, specialists);\n                })\n                .catch((error) => {\n                    console.log(error);\n                    Alert.error('Failed to get options');\n                })\n        },\n        addTicket: function (request) {\n            return this.$http.post(ADD_TICKET_URL, request)\n        },\n        updateTicket: function (request) {\n            return this.$http.post(UPDATE_TICKET_URL, request)\n        },\n        updateTicketWithResolve(request) {\n            let promise = new Promise((resolve, reject)=> {\n                this.$http.post(UPDATE_TICKET_URL, request)\n                .then((response)=> {\n                    if(response.body.success) {\n                        resolve(true); \n                    }\n                    else {\n                        apiWarningMessage(response);\n                        reject(false);\n                    }\n                    stopLaddaOnTimeout(); \n                })\n                .catch((error)=> {\n                    console.log(error); \n                    Alert.error('Failed to update'); \n                    stopLaddaOnTimeout(); \n                    reject(false);\n                });\n            });\n            return promise; \n        },\n        cancelTicket: function(request) {\n            return this.$http.post(CANCEL_TICKET_BY_ID_URL, request); \n        },\n        cancelTicketWithCallback(request, callback) {\n            this.$http.post(CANCEL_TICKET_BY_ID_URL, request)\n                .then((response)=> {\n                    if(response.body.success) {\n                        callback && callback(true);\n                    }\n                    else {\n                        apiWarningMessage(response);\n                        callback && callback(false);\n                    }\n                    stopLaddaOnTimeout();\n                })\n                .catch((error)=> {\n                    console.log(error); \n                    Alert.error('Failed to cancel ticket'); \n                    stopLaddaOnTimeout(); \n                    callback && callback(false); \n                });\n        },\n        submitTicketByIdAndPhoneNumber(ticketID, phoneNumber) {\n            if(phoneNumber) {\n                return this.$http.get(SUBMIT_TICKET_BY_TICKET_ID_AND_PHONE_NUMBER_URL(ticketID, phoneNumber)); \n            }\n            else {\n                return this.$http.get(SUBMIT_TICKET_BY_TICKET_ID_URL(ticketID)); \n            }\n        },\n        getTicketDetailById: function (ticketID) {\n            return this.$http.get(GET_TICKET_DETAIL_BY_ID_URL(ticketID))\n        },\n        getTicketDetailByIdWithResolve: function (ticketID) {\n           let promise = new Promise((resolve, reject)=> {\n                this.$http.get(GET_TICKET_DETAIL_BY_ID_URL(ticketID))\n                .then((response)=> {\n                    if(response.body.success) {\n                        resolve(response.body.data); \n                    }\n                    else {\n                        apiWarningMessage(response);\n                        reject(false);\n                    }\n                })\n                .catch((error)=> {\n                    console.log(error); \n                    Alert.error('Failed to get ticket detail'); \n                    reject(false);\n                });\n            });\n            return promise; \n        },\n        getTicketProgressById: function (ticketID) {\n            return this.$http.get(GET_TICKET_PROGRESS_BY_ID_URL(ticketID));\n        },\n        getTicketDetailAndProgressById: function (ticketID, callback) {\n            const vm = this;\n            Promise.all([\n                vm.$http.get(GET_TICKET_DETAIL_BY_ID_URL(ticketID)),\n                vm.$http.get(GET_TICKET_PROGRESS_BY_ID_URL(ticketID))])\n                .then(([ticketDetail, ticketProgress]) => {\n                    callback && callback(ticketDetail, ticketProgress);\n                })\n                .catch((error) => {\n                    console.log(error);\n                    Alert.error('Failed to get ticket detail and progress');\n                })\n        },\n        getSpecialistOptions: function () {\n            return this.$http.get(GET_SPECIALIST_OPTIONS_URL);\n        },\n        getStoreList: function () {\n            return this.$http.get(GET_STORE_LIST_URL);\n        },\n        getStoreOptionsWithCallback: function (callback) {\n            this.$http.get(GET_STORE_LIST_URL)\n                .then((response)=> {\n                    if(response.body.success) {\n                        callback && callback(response.body.data);\n                    }\n                    else {\n                        apiWarningMessage(response); \n                    }\n                })\n                .catch((error)=> {\n                    console.log(error); \n                    Alert.error('Failed to get store options');\n                });\n        },\n        getTicketOptionsForAppointment: function (request) {\n            return this.$http.post(GET_TICKET_OPTIONS_FOR_APPOINTMENT_URL, request)\n        },\n        getStoreOptionsAndCost: function (callback) {\n            const vm = this;\n            Promise.all([\n                vm.$http.get(GET_STORE_LIST_URL),\n                vm.$http.get(GET_DIAGNOSE_COST_FROM_MAGENTO_URL),\n            ])\n            .then(([stores, cost]) => {\n                callback && callback(stores, cost);\n            })\n            .catch((error) => {\n                console.log(error);\n                Alert.error('Failed to get store list and cost');\n            });\n        },\n        addAppointment(request) {\n            return this.$http.post(ADD_APPOINTMENT_URL, request); \n        },\n        updateAppointment(request) {\n            return this.$http.post(UPDATE_APPOINTMENT_URL, request); \n        },\n        rescheduleAppointment(request) {\n            return this.$http.post(RESCHEDULE_APPOINTMENT_URL, request); \n        },\n        updateAppointmentByScheduleType(request, scheduleType, callback) {\n            let link = ''; \n            if(scheduleType == 'add') {\n                link = ADD_APPOINTMENT_URL;\n            }\n            else if(scheduleType == 'edit') {\n                link = UPDATE_APPOINTMENT_URL;\n            }\n            else if(scheduleType == 'reschedule') {\n                link = RESCHEDULE_APPOINTMENT_URL; \n            }\n\n            link && this.$http.post(link, request)\n                .then((response)=> {\n                    if(response.body.success) {\n                        callback && callback(true);\n                    }\n                    else {\n                        apiWarningMessage(response); \n                        callback && callback(false);\n                    }\n                    stopLaddaOnTimeout();\n                })\n                .catch((error)=> {\n                    console.log(error); \n                    Alert.error('Failed to update appointment');\n                    callback && callback(false);\n                    stopLaddaOnTimeout(); \n                });\n\n            !link && stopLaddaOnTimeout(); \n        },\n        updateAndAddAppointment: function (updateRequest, addRequest, callback) {\n            const vm = this;\n            Promise.all([\n                vm.$http.post(UPDATE_APPOINTMENT_URL, updateRequest),\n                vm.$http.post(ADD_APPOINTMENT_URL, addRequest),  \n            ])\n            .then(([updateResponse, addResponse]) => {\n                callback && callback(updateResponse, addResponse);\n            })\n            .catch((error) => {\n                console.log(error);\n                Alert.error('Failed to reschedule the appointment');\n            });\n        },\n        checkoutPaypal(request) {\n            return this.$http.post(PAYPAL_CHECKOUT_URL, request); \n        },\n        checkoutBulkPaypal(requests, callback) {\n            const vm = this;\n            let toPost = (requests || []).map((request)=> {\n                return this.$http.post(PAYPAL_CHECKOUT_URL, request)\n            });\n            Promise.all(toPost)\n            .then((responses) => {\n                callback && callback(responses);\n            })\n            .catch((error) => {\n                console.log(error);\n                Alert.error('Failed to create multiple payment');\n            });\n        },\n        getPaymentHistoryTable(request) {\n            return this.$http.post(GET_PAYMENT_HISTORY_TABLE_URL, request); \n        },\n        confirmSparepart(request) {\n            return this.$http.post(CONFIRM_SPAREPART_URL, request); \n        },\n        confirmSparepartWithResolve(request) {\n           let promise = new Promise((resolve, reject)=> {\n                this.$http.post(CONFIRM_SPAREPART_URL, request)\n                .then((response)=> {\n                    if(response.body.success) {\n                        resolve(true); \n                    }\n                    else {\n                        apiWarningMessage(response);\n                        reject(false);\n                    }\n                    stopLaddaOnTimeout(); \n                })\n                .catch((error)=> {\n                    console.log(error); \n                    Alert.error('Failed to confirm sparepart'); \n                    stopLaddaOnTimeout(); \n                    reject(false);\n                });\n            });\n            return promise; \n        },\n        finishPaypalPayment(paymentId, token, PayerID) {\n            return this.$http.get(FINISH_PAYPAL_PAYMENT_URL(paymentId, token, PayerID)); \n        },\n\n    },\n});\n",
          "comment" : ""
        },
        "redirectURL" : "",
        "headersSize" : 279,
        "bodySize" : 17192,
        "comment" : ""
      },
      "cache" : { },
      "timings" : {
        "comment" : "",
        "send" : 0,
        "dns" : -1,
        "blocked" : -1,
        "connect" : 233,
        "wait" : 0,
        "receive" : 0,
        "ssl" : -1
      },
      "comment" : "",
      "_katalonRequestInformation" : {
        "name" : "48",
        "testObjectId" : "Temporary RESTful request object",
        "harId" : "a20792e7-6736-4e6a-856d-51acfe62e28d",
        "reportFolder" : null
      },
      "time" : 233
    } ],
    "comment" : ""
  }
}